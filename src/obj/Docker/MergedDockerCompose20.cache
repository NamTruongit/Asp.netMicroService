name: dockercompose2177619270275397375
services:
  basketdb:
    container_name: basketdb
    image: redis:alpine
    networks:
      default: null
    ports:
    - mode: ingress
      target: 6379
      published: "6379"
      protocol: tcp
    restart: always
  baskets.api:
    build:
      context: C:\Users\Acer\source\repos\Asp.netMicroService\src
      dockerfile: Services/Baskets/Baskets.API/Dockerfile
    container_name: baskets.api
    depends_on:
      basketdb:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      CacheSettings:ConnectionString: basketdb:6379
      EventBusSettings:HostAddress: amqp://guest:guest@rabbitmq:5672
      GrpcSettings:DiscountUrl: http://discount.grpc
    image: basketsapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8001"
      protocol: tcp
  catalog.api:
    build:
      context: C:\Users\Acer\source\repos\Asp.netMicroService\src
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
    container_name: catalog.api
    depends_on:
      catalogdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings:ConnectionString: mongodb://catalogdb:27017
    image: catalogapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8000"
      protocol: tcp
  catalogdb:
    container_name: catalogdb
    image: mongo
    networks:
      default: null
    ports:
    - mode: ingress
      target: 27017
      published: "27017"
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: mongo_data
      target: /data/db
      volume: {}
  discount.api:
    build:
      context: C:\Users\Acer\source\repos\Asp.netMicroService\src
      dockerfile: Services/Discount/Discount.API/Dockerfile
    container_name: discount.api
    depends_on:
      discountdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings:ConnectionString: Server=discountdb;Port=5432;Database=DiscountDb;User
        Id=postgres;Password=Pwd12345;
    image: discountapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8006"
      protocol: tcp
  discount.grpc:
    build:
      context: C:\Users\Acer\source\repos\Asp.netMicroService\src
      dockerfile: Services/Discount/Discount.GRPC/Dockerfile
    container_name: discount.grpc
    depends_on:
      discountdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings:ConnectionString: Server=discountdb;Port=5432;Database=DiscountDb;User
        Id=postgres;Password=Pwd12345;
    image: discountgrpc
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8007"
      protocol: tcp
  discountdb:
    container_name: discountdb
    environment:
      POSTGRES_DB: DiscountDb
      POSTGRES_PASSWORD: Pwd12345
      POSTGRES_USER: postgres
    image: postgres
    networks:
      default: null
    ports:
    - mode: ingress
      target: 5432
      published: "5432"
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: postgres_data
      target: /var/lib/postgresql/data
      volume: {}
  orderdb:
    container_name: orderdb
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: SwN12345678
    image: mcr.microsoft.com/mssql/server:2017-latest
    networks:
      default: null
    ports:
    - mode: ingress
      target: 1433
      published: "1433"
      protocol: tcp
    restart: always
  ordering.api:
    build:
      context: C:\Users\Acer\source\repos\Asp.netMicroService\src
      dockerfile: Services/Ordering/Ordering.API/Dockerfile
    container_name: ordering.api
    depends_on:
      orderdb:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings:OrderingConnectionString: Server=orderdb;Database=OrderDb;User
        Id=sa;Password=SwN12345678
      EventBusSettings:HostAddress: amqp://guest:guest@rabbitmq:5672
    image: orderingapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8008"
      protocol: tcp
  pgadmin:
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aspnetrun.com
      PGADMIN_DEFAULT_PASSWORD: admin1234
    image: dpage/pgadmin4
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "5050"
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: pgadmin_data
      target: /root/.pgadming
      volume: {}
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8003"
      protocol: tcp
    - mode: ingress
      target: 9000
      published: "9000"
      protocol: tcp
    restart: always
    volumes:
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
      bind:
        create_host_path: true
    - type: volume
      source: portainer_data
      target: /data
      volume: {}
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    networks:
      default: null
    ports:
    - mode: ingress
      target: 5672
      published: "5672"
      protocol: tcp
    - mode: ingress
      target: 15672
      published: "15672"
      protocol: tcp
    restart: always
networks:
  default:
    name: dockercompose2177619270275397375_default
volumes:
  mongo_data:
    name: dockercompose2177619270275397375_mongo_data
  pgadmin_data:
    name: dockercompose2177619270275397375_pgadmin_data
  portainer_data:
    name: dockercompose2177619270275397375_portainer_data
  postgres_data:
    name: dockercompose2177619270275397375_postgres_data